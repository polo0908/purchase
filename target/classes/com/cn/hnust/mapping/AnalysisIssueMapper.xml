<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cn.hnust.dao.AnalysisIssueMapper">
  <resultMap id="BaseResultMap" type="com.cn.hnust.pojo.AnalysisIssue">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="occurrence_num" jdbcType="INTEGER" property="occurrenceNum" />
    <result column="project_no" jdbcType="VARCHAR" property="projectNo" />
    <result column="issue" jdbcType="VARCHAR" property="issue" />
    <result column="quality_analysis_id" jdbcType="INTEGER" property="qualityAnalysisId" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="process" jdbcType="VARCHAR" property="process" />
    <result column="is_complaint" jdbcType="INTEGER" property="isComplaint" />
    <result column="complaint_id" jdbcType="INTEGER" property="complaintId" />
  </resultMap>
  <sql id="Base_Column_List">
    id, occurrence_num, project_no, issue, quality_analysis_id,create_time,process,is_complaint,complaint_id 
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from analysis_issue
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="selectByProjectNo" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from analysis_issue  
    where project_no = #{projectNo,jdbcType=VARCHAR}  
    <if test="isComplaint!=null">
     and is_complaint = #{isComplaint,jdbcType=INTEGER}   
    </if>
  </select>
  
   <!-- 查询出现次数多的10条数据 -->
   <select id="selectTop10" resultMap="BaseResultMap">
        select issue,process from analysis_issue a1 
        left join (select count(1)as issueCount,id from analysis_issue GROUP BY issue)a2 on a1.id = a2.id  
        where 1=1  
        <if test="issue != null"> 
         and issue like CONCAT('%', #{issue}, '%') 
        </if> 
        ORDER BY issueCount desc limit 0,10 
   </select>
   
   
   <select id="selectComplaintIssue" resultMap="BaseResultMap">
       select issue,process,a2.occurrence_num from analysis_issue a1 
        left join (select count(1)as occurrence_num,id from analysis_issue where is_complaint = 1 GROUP BY issue,process)a2 on a1.id = a2.id  
        where 1=1  and a2.occurrence_num is not null order by occurrence_num,process desc 
   </select>
   
   
   <select id="selectByProcess" resultMap="BaseResultMap">
      select issue,process from analysis_issue where process = #{process,jdbcType=VARCHAR} group by issue order by process desc 
   </select>
   <select id="selectByProcessAndIssue" resultMap="BaseResultMap">
      select issue,process from analysis_issue 
      where process = #{process,jdbcType=VARCHAR}  
      and issue like CONCAT('%', #{issue}, '%')
   </select>
   <select id="selectByComplaintId" resultMap="BaseResultMap">
      select <include refid="Base_Column_List" /> from analysis_issue 
      where complaint_id = #{complaintId,jdbcType=INTEGER}
   </select>
  
  
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from analysis_issue
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.cn.hnust.pojo.AnalysisIssue">
    insert into analysis_issue (id, occurrence_num, project_no, 
      issue, quality_analysis_id)
    values (#{id,jdbcType=INTEGER}, #{occurrenceNum,jdbcType=INTEGER}, #{projectNo,jdbcType=VARCHAR}, 
      #{issue,jdbcType=VARCHAR}, #{qualityAnalysisId,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.cn.hnust.pojo.AnalysisIssue" useGeneratedKeys="true" keyProperty="id">
    insert into analysis_issue
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="occurrenceNum != null">
        occurrence_num,
      </if>
      <if test="projectNo != null">
        project_no,
      </if>
      <if test="issue != null">
        issue,
      </if>
      <if test="qualityAnalysisId != null">
        quality_analysis_id,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="process != null">
        process,
      </if>
      <if test="isComplaint != null">
        is_complaint,
      </if>
      <if test="complaintId != null">
        complaint_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="occurrenceNum != null">
        #{occurrenceNum,jdbcType=INTEGER},
      </if>
      <if test="projectNo != null">
        #{projectNo,jdbcType=VARCHAR},
      </if>
      <if test="issue != null">
        #{issue,jdbcType=VARCHAR},
      </if>
      <if test="qualityAnalysisId != null">
        #{qualityAnalysisId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="process != null">
        #{process,jdbcType=VARCHAR},
      </if>
      <if test="isComplaint != null">
        #{isComplaint,jdbcType=INTEGER},
      </if>
      <if test="complaintId != null">
        #{complaintId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.cn.hnust.pojo.AnalysisIssue">
    update analysis_issue
    <set>
      <if test="occurrenceNum != null">
        occurrence_num = #{occurrenceNum,jdbcType=INTEGER},
      </if>
      <if test="projectNo != null">
        project_no = #{projectNo,jdbcType=VARCHAR},
      </if>
      <if test="issue != null">
        issue = #{issue,jdbcType=VARCHAR},
      </if>
      <if test="qualityAnalysisId != null">
        quality_analysis_id = #{qualityAnalysisId,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.cn.hnust.pojo.AnalysisIssue">
    update analysis_issue
    set occurrence_num = #{occurrenceNum,jdbcType=INTEGER},
      project_no = #{projectNo,jdbcType=VARCHAR},
      issue = #{issue,jdbcType=VARCHAR},
      quality_analysis_id = #{qualityAnalysisId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  
  
   <insert id="insertBatch" parameterType="java.util.List" useGeneratedKeys="true" keyProperty="id">       
    insert into analysis_issue ( 
       project_no, issue,create_time,process,is_complaint,complaint_id
       ) values   
        <foreach collection="list" item="item" index="index" separator="," >  
            ( 
              #{item.projectNo}, 
              #{item.issue},
              #{item.createTime},
              #{item.process},
              #{item.isComplaint},
              #{item.complaintId}
		      ) 
        </foreach>  
    </insert>  
    
   <update id="updateBatch" parameterType="java.util.List">       
          <foreach collection="list" item="item" index="index"  open="" close="" separator=";">   
	     	    update analysis_issue   
	     	    <set>     
				complaint_id = #{item.complaintId,jdbcType=INTEGER}
				</set> 
	            where id = #{item.id}            
	     </foreach>       
    </update>  
</mapper>